#!/bin/sh /usr/share/dpatch/dpatch-run
## 04_check_snmp_process.dpatch by Jan Wagner <waja@cyconet.org>
##
## DP: Update script to version 1.10

@DPATCH@

diff -Nur nagios-snmp-plugins-1.1.1.orig/check_snmp_process.pl nagios-snmp-plugins-1.1.1/check_snmp_process.pl
--- nagios-snmp-plugins-1.1.1.orig/check_snmp_process.pl	2007-03-12 21:36:02.000000000 +0100
+++ nagios-snmp-plugins-1.1.1/check_snmp_process.pl	2007-10-12 22:23:24.000000000 +0200
@@ -1,45 +1,43 @@
 #!/usr/bin/perl -w
 ############################## check_snmp_process ##############
-# Version : 1.4
-# Date : March 12 2007
-# Author  : Patrick Proy (patrick at proy.org)
+my $Version='1.10';
+# Date : Oct 12 2007
+# Author  : Patrick Proy (patrick at proy dot org)
 # Help : http://nagios.manubulon.com
 # Licence : GPL - http://www.fsf.org/licenses/gpl.txt
-# Contrib : Makina Corpus
+# Contrib : Makina Corpus, adam At greekattic d0t com
 # TODO : put $o_delta as an option
-# Contrib : 
+# 	 If testing on localhost, selects itself....
 ###############################################################
 #
 # help : ./check_snmp_process -h
 
+use strict;
+use Net::SNMP;
+use Getopt::Long;
+
 ############### BASE DIRECTORY FOR TEMP FILE ########
 my $o_base_dir="/tmp/tmp_Nagios_proc.";
 my $file_history=200;   # number of data to keep in files.
 my $delta_of_time_to_make_average=300;  # 5minutes by default
- 
-use strict;
-use Net::SNMP;
-use Getopt::Long;
 
 # Nagios specific
 
-use lib "/usr/local/nagios/libexec";
-use utils qw(%ERRORS $TIMEOUT);
-#my $TIMEOUT = 5;
-#my %ERRORS=('OK'=>0,'WARNING'=>1,'CRITICAL'=>2,'UNKNOWN'=>3,'DEPENDENT'=>4);
+my $TIMEOUT = 15;
+my %ERRORS=('OK'=>0,'WARNING'=>1,'CRITICAL'=>2,'UNKNOWN'=>3,'DEPENDENT'=>4);
 
 # SNMP Datas
 my $process_table= '1.3.6.1.2.1.25.4.2.1';
 my $index_table = '1.3.6.1.2.1.25.4.2.1.1';
 my $run_name_table = '1.3.6.1.2.1.25.4.2.1.2';
 my $run_path_table = '1.3.6.1.2.1.25.4.2.1.4';
+my $run_param_table = '1.3.6.1.2.1.25.4.2.1.5';
 my $proc_mem_table = '1.3.6.1.2.1.25.5.1.1.2'; # Kbytes
 my $proc_cpu_table = '1.3.6.1.2.1.25.5.1.1.1'; # Centi sec of CPU
 my $proc_run_state = '1.3.6.1.2.1.25.4.2.1.7';
 
 # Globals
 
-my $Version='1.4';
 
 my $o_host = 	undef; 		# hostname 
 my $o_community =undef; 	# community 
@@ -57,6 +55,8 @@
 my $o_path=	undef;		# check path instead of name
 my $o_inverse=	undef;		# checks max instead of min number of process
 my $o_get_all=	undef;		# get all tables at once
+my $o_param=	undef;		# Add process parameters for selection 
+my $o_perf=	undef;		# Add performance output
 my $o_timeout=  5;            	# Default 5s Timeout
 # SNMP V3 specific
 my $o_login=	undef;		# snmp v3 login
@@ -80,7 +80,7 @@
 sub p_version { print "check_snmp_process version : $Version\n"; }
 
 sub print_usage {
-    print "Usage: $0 [-v] -H <host> -C <snmp_community> [-2] | (-l login -x passwd) [-p <port>] -n <name> [-w <min_proc>[,<max_proc>] -c <min_proc>[,max_proc] ] [-m<warn Mb>,<crit Mb> -a -u<warn %>,<crit%> ] [-t <timeout>] [-o <octet_length>] [-f ] [-r] [-V] [-g]\n";
+    print "Usage: $0 [-v] -H <host> -C <snmp_community> [-2] | (-l login -x passwd) [-p <port>] -n <name> [-w <min_proc>[,<max_proc>] -c <min_proc>[,max_proc] ] [-m<warn Mb>,<crit Mb> -a -u<warn %>,<crit%> -d<delta> ] [-t <timeout>] [-o <octet_length>] [-f -A -F ] [-r] [-V] [-g]\n";
 }
 
 sub isnotnum { # Return true if arg is not a number
@@ -174,6 +174,12 @@
 -f, --fullpath
    Use full path name instead of process name 
    (Windows doesn't provide full path name)
+-A, --param
+   Add parameters to select processes.
+   ex : "named.*-t /var/named/chroot" will only select named process with this parameter 
+-F, --perfout
+   Add performance output
+   outputs : memory_usage, num_process, cpu_usage
 -w, --warn=MIN[,MAX]
    Number of process that will cause a warning 
    -1 for no warning, MAX must be >0. Ex : -w-1,50
@@ -193,6 +199,8 @@
    checks cpu usage of all process
    values are warning and critical values in % of CPU usage
    if more than one CPU, value can be > 100% : 100%=1 CPU
+-d, --delta=seconds
+   make an average of <delta> seconds for CPU (default 300=5min)   
 -g, --getall
   In some cases, it is necessary to get all data at once because
   process die very frequently.
@@ -242,6 +250,9 @@
 		'2'	=> \$o_version2,	'v2c'		=> \$o_version2,
 		'o:i'   => \$o_octetlength,    	'octetlength:i' => \$o_octetlength,
 		'g'   	=> \$o_get_all,       	'getall'      	=> \$o_get_all,
+		'A'     => \$o_param,         'param'       => \$o_param,
+		'F'     => \$o_perf,         'perfout'       => \$o_perf,
+        'd:i'   => \$o_delta,           'delta:i'       => \$o_delta,		
 		'V'     => \$o_version,         'version'       => \$o_version
     );
     if (defined ($o_help)) { help(); exit $ERRORS{"UNKNOWN"}};
@@ -411,6 +422,19 @@
    exit $ERRORS{"UNKNOWN"};
 }
 
+my $resultat_param=undef;
+if (defined($o_param)) { # Get parameter table too
+    $resultat_param = (Net::SNMP->VERSION < 4) ?
+        $session->get_table($run_param_table)
+        :$session->get_table(Baseoid => $run_param_table);
+   if (!defined($resultat_param)) {
+      printf("ERROR: Process param table : %s.\n", $session->error);
+      $session->close;
+      exit $ERRORS{"UNKNOWN"};
+   }
+   
+}
+
 if (defined ($o_get_all)) {
   $getall_run = (Net::SNMP->VERSION < 4) ?
 	$session->get_table($proc_run_state )
@@ -458,8 +482,14 @@
 verb("Filter : $o_descr");
 
 foreach my $key ( keys %$resultat) {
-   verb("OID : $key, Desc : $$resultat{$key}");
    # test by regexp or exact match
+   # First add param if necessary
+   if (defined($o_param)){
+	my $pid = (split /\./,$key)[-1];
+	$pid = $run_param_table .".".$pid;
+        $$resultat{$key} .= " " . $$resultat_param{$pid};
+   }
+   verb("OID : $key, Desc : $$resultat{$key}");
    my $test = defined($o_noreg)
                 ? $$resultat{$key} eq $o_descr
                 : $$resultat{$key} =~ /$o_descr/;
@@ -545,6 +575,7 @@
 }
 
 my $final_status=0;
+my $perf_output;
 my ($res_memory,$res_cpu)=(0,0);
 my $memory_print="";
 my $cpu_print="";
@@ -571,6 +602,9 @@
  } else {
    $memory_print=", Mem : ".sprintf("%.1f",$res_memory)."Mb OK";
  }
+ if (defined($o_perf)) {
+	$perf_output= "'memory_usage'=".sprintf("%.1f",$res_memory) ."MB;".$o_memL[0].";".$o_memL[1];
+ }
 }
 
 ######## Checks CPU usage
@@ -609,6 +643,10 @@
         if ($file_values[$j][0] > $trigger_low) {
           # found value = centiseconds / seconds = %cpu
           $found_value= ($res_cpu-$file_values[$j][1]) / ($timenow - $file_values[$j][0] );
+	  if ($found_value <0) { # in case of program restart
+		$j=0;$found_value=undef; # don't look for more values
+		$n_rows=0; # reset file
+	  }
         }
       }
       $j--;
@@ -631,6 +669,10 @@
     } else {
       $cpu_print.=", Cpu : ".sprintf("%.0f",$found_value)."% OK";
     }
+	if (defined($o_perf)) {
+		if (!defined($perf_output)) {$perf_output="";} else {$perf_output.=" ";}
+		$perf_output.= "'cpu_usage'=". sprintf("%.0f",$found_value)."%;".$o_cpuL[0].";".$o_cpuL[1];
+	}
   } else {
     if ($final_status==0) { $final_status=3 };
     $cpu_print.=", No data for CPU (".$n_rows." line(s)):UNKNOWN";
@@ -659,7 +701,14 @@
    print " (<= ",$o_warnL[1],"):OK";
 }
 
-print $memory_print,$cpu_print,"\n";
+print $memory_print,$cpu_print;
+
+if (defined($o_perf)) {
+	if (!defined($perf_output)) {$perf_output="";} else {$perf_output.=" ";}
+	$perf_output.= "'num_process'=". $num_int_ok.";".$o_warnL[0].";".$o_critL[0];
+	print " | ",$perf_output;
+}
+print "\n";
 
 if ($final_status==2) { exit $ERRORS{"CRITICAL"};}
 if ($final_status==1) { exit $ERRORS{"WARNING"};}
