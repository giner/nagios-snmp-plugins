## 05_check_snmp_storage by Jan Wagner <waja@cyconet.org>
##
## DP: Update script to version 1.3.3 

diff -Nur nagios-snmp-plugins-1.1.1.orig/check_snmp_storage.pl nagios-snmp-plugins-1.1.1/check_snmp_storage.pl
--- nagios-snmp-plugins-1.1.1.orig/check_snmp_storage.pl	2007-03-12 22:01:36.000000000 +0100
+++ nagios-snmp-plugins-1.1.1/check_snmp_storage.pl	2007-10-12 22:23:24.000000000 +0200
@@ -1,12 +1,12 @@
 #!/usr/bin/perl -w
 ############################## check_snmp_storage ##############
-# Version : 1.3.2
-# Date :  March 12 2007
+# Version : 1.3.3
+# Date :  Jun 1 2007
 # Author  : Patrick Proy ( patrick at proy.org)
 # Help : http://nagios.manubulon.com
 # Licence : GPL - http://www.fsf.org/licenses/gpl.txt
 # TODO : 
-# Contribs : Dimo Velev, Makina Corpus
+# Contribs : Dimo Velev, Makina Corpus, A. Greiner-Bär
 #################################################################
 #
 # help : ./check_snmp_storage -h
@@ -57,7 +57,7 @@
 # Globals
 
 my $Name='check_snmp_storage';
-my $Version='1.3.2';
+my $Version='1.3.3';
 
 my $o_host = 	undef; 		# hostname 
 my $o_community = undef; 	# community 
@@ -80,6 +80,8 @@
 my $o_perf=	undef;		# Output performance data
 my $o_short=	undef;	# Short output parameters
 my @o_shortL=	undef;		# output type,where,cut
+my $o_reserve=	0;              # % reserved blocks (A. Greiner-Bär patch)
+my $o_giga=		undef;	# output and levels in gigabytes instead of megabytes
 # SNMPv3 specific
 my $o_login=	undef;		# Login for snmpv3
 my $o_passwd=	undef;		# Pass for snmpv3
@@ -95,7 +97,7 @@
 sub p_version { print "$Name version : $Version\n"; }
 
 sub print_usage {
-    print "Usage: $Name [-v] -H <host> -C <snmp_community> [-2] | (-l login -x passwd [-X pass -L <authp>,<privp>]) [-p <port>] -m <name in desc_oid> [-q storagetype] -w <warn_level> -c <crit_level> [-t <timeout>] [-T pl|pu|bl|bu ] [-r] [-s] [-i] [-e] [-S 0|1[,1,<car>]] [-o <octet_length>]\n";
+    print "Usage: $Name [-v] -H <host> -C <snmp_community> [-2] | (-l login -x passwd [-X pass -L <authp>,<privp>]) [-p <port>] -m <name in desc_oid> [-q storagetype] -w <warn_level> -c <crit_level> [-t <timeout>] [-T pl|pu|bl|bu ] [-r -s -i -G] [-e] [-S 0|1[,1,<car>]] [-o <octet_length>] [-R <% reserved>]\n";
 }
 
 sub round ($$) {
@@ -122,7 +124,7 @@
 
 sub help {
    print "\nSNMP Disk Monitor for Nagios version ",$Version,"\n";
-   print "(c)2004-2006 Patrick Proy\n\n";
+   print "(c)2004-2007 Patrick Proy\n\n";
    print_usage();
    print <<EOT;
 By default, plugin will monitor %used on drives :
@@ -135,7 +137,7 @@
    name or IP address of host to check
 -C, --community=COMMUNITY NAME
    community name for the host's SNMP agent (implies SNMP v1)
-2, --v2c
+-2, --v2c
    Use snmp v2c
 -l, --login=LOGIN ; -x, --passwd=PASSWD
    Login and auth password for snmpv3 authentication 
@@ -179,6 +181,11 @@
 -c, --critical=INTEGER
    percent / MB of disk used to generate CRITICAL state
    you can add the % sign 
+-R, --reserved=INTEGER
+   % reserved blocks for superuser
+   For ext2/3 filesystems, it is 5% by default
+-G, --gigabyte
+   output, warning & critical levels in gigabytes
 -f, --perfparse
    Perfparse compatible output
 -S, --short=<type>[,<where>,<cut>]
@@ -245,7 +252,9 @@
 		'q:s'  	=> \$o_storagetype,	'storagetype:s'=> \$o_storagetype,
 	'S:s'   => \$o_short,         	'short:s'       => \$o_short,
 	'o:i'   => \$o_octetlength,    	'octetlength:i' => \$o_octetlength,
-	'f'	=> \$o_perf,		'perfparse'	=> \$o_perf
+	'f'	=> \$o_perf,		'perfparse'	=> \$o_perf,
+	'R:i'	=> \$o_reserve,	        'reserved:i'	=> \$o_reserve,
+	'G'	=> \$o_giga,	        'gigabyte'	=> \$o_giga
     );
     if (defined($o_help) ) { help(); exit $ERRORS{"UNKNOWN"}};
     if (defined($o_version) ) { p_version(); exit $ERRORS{"UNKNOWN"}};
@@ -271,6 +280,9 @@
     # Check compulsory attributes
     if ( ! defined($o_descr) ||  ! defined($o_host) || !defined($o_warn) || 
 	!defined($o_crit)) { print_usage(); exit $ERRORS{"UNKNOWN"}};
+    # Get rid of % sign if any
+    $o_warn =~ s/\%//; 
+    $o_crit =~ s/\%//;
     # Check for positive numbers
     if (($o_warn < 0) || ($o_crit < 0)) { print " warn and critical > 0 \n";print_usage(); exit $ERRORS{"UNKNOWN"}};
     # check if warn or crit  in % and MB is tested
@@ -278,9 +290,6 @@
 	print "warning or critical cannot be in % when MB are tested\n";
 	print_usage(); exit $ERRORS{"UNKNOWN"};
     }
-    # Get rid of % sign
-    $o_warn =~ s/\%//; 
-    $o_crit =~ s/\%//;
     # Check warning and critical values
     if ( ( $o_type eq 'pu' ) || ( $o_type eq 'bu' )) {
 	if ($o_warn >= $o_crit) { print " warn < crit if type=",$o_type,"\n";print_usage(); exit $ERRORS{"UNKNOWN"}};
@@ -306,6 +315,10 @@
     if (defined ($o_octetlength) && (isnnum($o_octetlength) || $o_octetlength > 65535 || $o_octetlength < 484 )) {
 		print "octet lenght must be < 65535 and > 484\n";print_usage(); exit $ERRORS{"UNKNOWN"};
     }	
+    #### reserved blocks checks (A. Greiner-Bär patch).
+    if (defined ($o_reserve) && (isnnum($o_reserve) || $o_reserve > 99 || $o_reserve < 0 )) {
+		print "reserved blocks must be < 100 and >= 0\n";print_usage(); exit $ERRORS{"UNKNOWN"};
+    }
 }
 
 ########## MAIN #######
@@ -521,21 +534,35 @@
 my $crit_state=0;
 my ($p_warn,$p_crit);
 my $output=undef;
+my $output_metric_val = 1024**2;
+my $output_metric = "M";
+# Set the metric 
+if (defined($o_giga)) {
+	$output_metric_val *= 1024;
+	$output_metric='G';
+}
+
 for ($i=0;$i<$num_int;$i++) {
   verb("Descr : $descr[$i]");
   verb("Size :  $$result{$size_table . $tindex[$i]}");
   verb("Used : $$result{$used_table . $tindex[$i]}");
   verb("Alloc : $$result{$alloc_units . $tindex[$i]}");
-  my $to = $$result{$size_table . $tindex[$i]} * $$result{$alloc_units . $tindex[$i]} / 1024**2;
+  if (!defined($$result{$size_table . $tindex[$i]}) || 
+	!defined($$result{$used_table . $tindex[$i]}) || 
+	!defined ($$result{$alloc_units . $tindex[$i]})) {
+     print "Data not fully defined for storage ",$descr[$i]," : UNKNOWN\n";
+     exit $ERRORS{"UNKNOWN"};
+  }
+  my $to = $$result{$size_table . $tindex[$i]} * ( ( 100 - $o_reserve ) / 100 ) * $$result{$alloc_units . $tindex[$i]} / $output_metric_val;
   my $pu=undef;
   if ( $$result{$used_table . $tindex[$i]} != 0 ) {
-    $pu = $$result{$used_table . $tindex[$i]}*100 / $$result{$size_table . $tindex[$i]};
+	$pu = $$result{$used_table . $tindex[$i]}* 100 /  ( $$result{$size_table . $tindex[$i]} * ( 100 - $o_reserve ) / 100 );
   }else {
     $pu=0;
   } 
-  my $bu = $$result{$used_table . $tindex[$i]} *  $$result{$alloc_units . $tindex[$i]} / 1024**2;
+  my $bu = $$result{$used_table . $tindex[$i]} *  $$result{$alloc_units . $tindex[$i]} / $output_metric_val;
   my $pl = 100 - $pu;
-  my $bl = ($$result{$size_table . $tindex[$i]}- $$result{$used_table . $tindex[$i]}) * $$result{$alloc_units . $tindex[$i]} / 1024**2;
+  my $bl = ( ( $$result{$size_table . $tindex[$i]} * ( ( 100 - $o_reserve ) / 100 ) - ( $$result{$used_table . $tindex[$i]} ) ) * $$result{$alloc_units . $tindex[$i]} / $output_metric_val );
   # add a ' ' if some data exists in $perf_out
   $perf_out .= " " if (defined ($perf_out)) ;
   ##### Ouputs and checks
@@ -554,7 +581,7 @@
 	   || (($pu >= $o_warn) && ($locstate=$warn_state=1));
 	if (defined($o_shortL[2])) {}
 	if (!defined($o_shortL[0]) || ($locstate==1)) { # print full output if warn or critical state
-	  $output.=sprintf ("%s: %.0f%%used(%.0fMB/%.0fMB) ",$descr[$i],$pu,$bu,$to);
+	  $output.=sprintf ("%s: %.0f%%used(%.0f%sB/%.0f%sB) ",$descr[$i],$pu,$bu,$output_metric,$to,$output_metric);
     } elsif ($o_shortL[0] == 1) {
 	  $output.=sprintf ("%s: %.0f%% ",$descr[$i],$pu);
 	} 
@@ -566,9 +593,9 @@
     ( ($bu >= $o_crit) && ($locstate=$crit_state=1) ) 
 	  || ( ($bu >= $o_warn) && ($locstate=$warn_state=1) );
 	if (!defined($o_shortL[0]) || ($locstate==1)) { # print full output if warn or critical state
-      $output.=sprintf("%s: %.0fMBused/%.0fMB (%.0f%%) ",$descr[$i],$bu,$to,$pu);
+      $output.=sprintf("%s: %.0f%sBused/%.0f%sB (%.0f%%) ",$descr[$i],$bu,$output_metric,$to,$output_metric,$pu);
     } elsif ($o_shortL[0] == 1) {
-	  $output.=sprintf("%s: %.0fMB ",$descr[$i],$bu);
+	  $output.=sprintf("%s: %.0f%sB ",$descr[$i],$bu,$output_metric);
     } 
  }
  
@@ -578,9 +605,9 @@
     ( ($bl <= $o_crit) && ($locstate=$crit_state=1) ) 
 	  || ( ($bl <= $o_warn) && ($locstate=$warn_state=1) );
 	if (!defined($o_shortL[0]) || ($locstate==1)) { # print full output if warn or critical state
-      $output.=sprintf ("%s: %.0fMBleft/%.0fMB (%.0f%%) ",$descr[$i],$bl,$to,$pl);
+      $output.=sprintf ("%s: %.0f%sBleft/%.0f%sB (%.0f%%) ",$descr[$i],$bl,$output_metric,$to,$output_metric,$pl);
     } elsif ($o_shortL[0] == 1) {
-	  $output.=sprintf ("%s: %.0fMB ",$descr[$i],$bl);
+	  $output.=sprintf ("%s: %.0f%sB ",$descr[$i],$bl,$output_metric);
     } 
  }
   
@@ -590,13 +617,13 @@
     ( ($pl <= $o_crit) && ($locstate=$crit_state=1) ) 
 	  || ( ($pl <= $o_warn) && ($locstate=$warn_state=1) );
 	if (!defined($o_shortL[0]) || ($locstate==1)) { # print full output if warn or critical state
-      $output.=sprintf ("%s: %.0f%%left(%.0fMB/%.0fMB) ",$descr[$i],$pl,$bl,$to);
+      $output.=sprintf ("%s: %.0f%%left(%.0f%sB/%.0f%sB) ",$descr[$i],$pl,$bl,$output_metric,$to,$output_metric);
     } elsif ($o_shortL[0] == 1) {
 	  $output.=sprintf ("%s: %.0f%% ",$descr[$i],$pl);
     } 
   }
   # Performance output (in MB)
-  $perf_out .= "'".$Pdescr. "'=" . round($bu,0) . "MB;" . round($p_warn,0) 
+  $perf_out .= "'".$Pdescr. "'=" . round($bu,0) . $output_metric ."B;" . round($p_warn,0) 
 	       . ";" . round($p_crit,0) . ";0;" . round($to,0);
 }
 
@@ -606,8 +633,8 @@
 my $comp_unit=undef;
 ($o_type eq "pu") && ($comp_oper ="<") && ($comp_unit ="%");
 ($o_type eq "pl") && ($comp_oper =">") && ($comp_unit ="%");
-($o_type eq "bu") && ($comp_oper ="<") && ($comp_unit ="MB");
-($o_type eq 'bl') && ($comp_oper =">") && ($comp_unit ="MB");
+($o_type eq "bu") && ($comp_oper ="<") && ($comp_unit = $output_metric."B");
+($o_type eq 'bl') && ($comp_oper =">") && ($comp_unit =$output_metric."B");
 
 if (!defined ($output)) { $output="All selected storages "; }
 
